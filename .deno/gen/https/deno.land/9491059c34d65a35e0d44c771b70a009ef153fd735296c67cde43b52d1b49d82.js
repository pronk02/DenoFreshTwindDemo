import { fromFileUrl } from "../deps.ts";
import * as deno from "./deno.ts";
export async function load(infoCache, url, options) {
    switch(url.protocol){
        case "http:":
        case "https:":
        case "data:":
            return await loadFromCLI(infoCache, url, options);
        case "file:":
            {
                const res = await loadFromCLI(infoCache, url, options);
                res.watchFiles = [
                    fromFileUrl(url.href)
                ];
                return res;
            }
    }
    return null;
}
async function loadFromCLI(infoCache, specifier, options) {
    const specifierRaw = specifier.href;
    if (!infoCache.has(specifierRaw)) {
        const { modules , redirects  } = await deno.info(specifier, {
            importMap: options.importMapURL?.href
        });
        for (const module of modules){
            infoCache.set(module.specifier, module);
        }
        for (const [specifier1, redirect] of Object.entries(redirects)){
            const redirected = infoCache.get(redirect);
            if (!redirected) {
                throw new TypeError("Unreachable.");
            }
            infoCache.set(specifier1, redirected);
        }
    }
    const module1 = infoCache.get(specifierRaw);
    if (!module1) {
        throw new TypeError("Unreachable.");
    }
    if (module1.error) throw new Error(module1.error);
    if (!module1.local) throw new Error("Module not downloaded yet.");
    let loader;
    switch(module1.mediaType){
        case "JavaScript":
        case "Mjs":
            loader = "js";
            break;
        case "JSX":
            loader = "jsx";
            break;
        case "TypeScript":
        case "Mts":
            loader = "ts";
            break;
        case "TSX":
            loader = "tsx";
            break;
        default:
            throw new Error(`Unhandled media type ${module1.mediaType}.`);
    }
    const contents = await Deno.readFile(module1.local);
    return {
        contents,
        loader
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZXNidWlsZF9kZW5vX2xvYWRlckAwLjUuMC9zcmMvbmF0aXZlX2xvYWRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlc2J1aWxkLCBmcm9tRmlsZVVybCB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgKiBhcyBkZW5vIGZyb20gXCIuL2Rlbm8udHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBMb2FkT3B0aW9ucyB7XG4gIGltcG9ydE1hcFVSTD86IFVSTDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWQoXG4gIGluZm9DYWNoZTogTWFwPHN0cmluZywgZGVuby5Nb2R1bGVFbnRyeT4sXG4gIHVybDogVVJMLFxuICBvcHRpb25zOiBMb2FkT3B0aW9ucyxcbik6IFByb21pc2U8ZXNidWlsZC5PbkxvYWRSZXN1bHQgfCBudWxsPiB7XG4gIHN3aXRjaCAodXJsLnByb3RvY29sKSB7XG4gICAgY2FzZSBcImh0dHA6XCI6XG4gICAgY2FzZSBcImh0dHBzOlwiOlxuICAgIGNhc2UgXCJkYXRhOlwiOlxuICAgICAgcmV0dXJuIGF3YWl0IGxvYWRGcm9tQ0xJKGluZm9DYWNoZSwgdXJsLCBvcHRpb25zKTtcbiAgICBjYXNlIFwiZmlsZTpcIjoge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgbG9hZEZyb21DTEkoaW5mb0NhY2hlLCB1cmwsIG9wdGlvbnMpO1xuICAgICAgcmVzLndhdGNoRmlsZXMgPSBbZnJvbUZpbGVVcmwodXJsLmhyZWYpXTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkRnJvbUNMSShcbiAgaW5mb0NhY2hlOiBNYXA8c3RyaW5nLCBkZW5vLk1vZHVsZUVudHJ5PixcbiAgc3BlY2lmaWVyOiBVUkwsXG4gIG9wdGlvbnM6IExvYWRPcHRpb25zLFxuKTogUHJvbWlzZTxlc2J1aWxkLk9uTG9hZFJlc3VsdD4ge1xuICBjb25zdCBzcGVjaWZpZXJSYXcgPSBzcGVjaWZpZXIuaHJlZjtcbiAgaWYgKCFpbmZvQ2FjaGUuaGFzKHNwZWNpZmllclJhdykpIHtcbiAgICBjb25zdCB7IG1vZHVsZXMsIHJlZGlyZWN0cyB9ID0gYXdhaXQgZGVuby5pbmZvKHNwZWNpZmllciwge1xuICAgICAgaW1wb3J0TWFwOiBvcHRpb25zLmltcG9ydE1hcFVSTD8uaHJlZixcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IG1vZHVsZSBvZiBtb2R1bGVzKSB7XG4gICAgICBpbmZvQ2FjaGUuc2V0KG1vZHVsZS5zcGVjaWZpZXIsIG1vZHVsZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW3NwZWNpZmllciwgcmVkaXJlY3RdIG9mIE9iamVjdC5lbnRyaWVzKHJlZGlyZWN0cykpIHtcbiAgICAgIGNvbnN0IHJlZGlyZWN0ZWQgPSBpbmZvQ2FjaGUuZ2V0KHJlZGlyZWN0KTtcbiAgICAgIGlmICghcmVkaXJlY3RlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5yZWFjaGFibGUuXCIpO1xuICAgICAgfVxuICAgICAgaW5mb0NhY2hlLnNldChzcGVjaWZpZXIsIHJlZGlyZWN0ZWQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1vZHVsZSA9IGluZm9DYWNoZS5nZXQoc3BlY2lmaWVyUmF3KTtcbiAgaWYgKCFtb2R1bGUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5yZWFjaGFibGUuXCIpO1xuICB9XG5cbiAgaWYgKG1vZHVsZS5lcnJvcikgdGhyb3cgbmV3IEVycm9yKG1vZHVsZS5lcnJvcik7XG4gIGlmICghbW9kdWxlLmxvY2FsKSB0aHJvdyBuZXcgRXJyb3IoXCJNb2R1bGUgbm90IGRvd25sb2FkZWQgeWV0LlwiKTtcbiAgbGV0IGxvYWRlcjogZXNidWlsZC5Mb2FkZXI7XG4gIHN3aXRjaCAobW9kdWxlLm1lZGlhVHlwZSkge1xuICAgIGNhc2UgXCJKYXZhU2NyaXB0XCI6XG4gICAgY2FzZSBcIk1qc1wiOlxuICAgICAgbG9hZGVyID0gXCJqc1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIkpTWFwiOlxuICAgICAgbG9hZGVyID0gXCJqc3hcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJUeXBlU2NyaXB0XCI6XG4gICAgY2FzZSBcIk10c1wiOlxuICAgICAgbG9hZGVyID0gXCJ0c1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlRTWFwiOlxuICAgICAgbG9hZGVyID0gXCJ0c3hcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaGFuZGxlZCBtZWRpYSB0eXBlICR7bW9kdWxlLm1lZGlhVHlwZX0uYCk7XG4gIH1cbiAgY29uc3QgY29udGVudHMgPSBhd2FpdCBEZW5vLnJlYWRGaWxlKG1vZHVsZS5sb2NhbCk7XG4gIHJldHVybiB7IGNvbnRlbnRzLCBsb2FkZXIgfTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFrQixXQUFXLFFBQVEsWUFBWSxDQUFDO0FBQ2xELFlBQVksSUFBSSxNQUFNLFdBQVcsQ0FBQztBQU1sQyxPQUFPLGVBQWUsSUFBSSxDQUN4QixTQUF3QyxFQUN4QyxHQUFRLEVBQ1IsT0FBb0IsRUFDa0I7SUFDdEMsT0FBUSxHQUFHLENBQUMsUUFBUTtRQUNsQixLQUFLLE9BQU8sQ0FBQztRQUNiLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxPQUFPO1lBQ1YsT0FBTyxNQUFNLFdBQVcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELEtBQUssT0FBTztZQUFFO2dCQUNaLE1BQU0sR0FBRyxHQUFHLE1BQU0sV0FBVyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEFBQUM7Z0JBQ3ZELEdBQUcsQ0FBQyxVQUFVLEdBQUc7b0JBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQUMsQ0FBQztnQkFDekMsT0FBTyxHQUFHLENBQUM7YUFDWjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7Q0FDYjtBQUVELGVBQWUsV0FBVyxDQUN4QixTQUF3QyxFQUN4QyxTQUFjLEVBQ2QsT0FBb0IsRUFDVztJQUMvQixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsSUFBSSxBQUFDO0lBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ2hDLE1BQU0sRUFBRSxPQUFPLENBQUEsRUFBRSxTQUFTLENBQUEsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDeEQsU0FBUyxFQUFFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSTtTQUN0QyxDQUFDLEFBQUM7UUFDSCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBRTtZQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDekM7UUFDRCxLQUFLLE1BQU0sQ0FBQyxVQUFTLEVBQUUsUUFBUSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBRTtZQUM3RCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxBQUFDO1lBQzNDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNyQztZQUNELFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3RDO0tBQ0Y7SUFFRCxNQUFNLE9BQU0sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxBQUFDO0lBQzNDLElBQUksQ0FBQyxPQUFNLEVBQUU7UUFDWCxNQUFNLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3JDO0lBRUQsSUFBSSxPQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxPQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUNqRSxJQUFJLE1BQU0sQUFBZ0IsQUFBQztJQUMzQixPQUFRLE9BQU0sQ0FBQyxTQUFTO1FBQ3RCLEtBQUssWUFBWSxDQUFDO1FBQ2xCLEtBQUssS0FBSztZQUNSLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDZCxNQUFNO1FBQ1IsS0FBSyxLQUFLO1lBQ1IsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNmLE1BQU07UUFDUixLQUFLLFlBQVksQ0FBQztRQUNsQixLQUFLLEtBQUs7WUFDUixNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ2QsTUFBTTtRQUNSLEtBQUssS0FBSztZQUNSLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDZixNQUFNO1FBQ1I7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMscUJBQXFCLEVBQUUsT0FBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hFO0lBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU0sQ0FBQyxLQUFLLENBQUMsQUFBQztJQUNuRCxPQUFPO1FBQUUsUUFBUTtRQUFFLE1BQU07S0FBRSxDQUFDO0NBQzdCIn0=